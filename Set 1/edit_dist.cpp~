#include <iostream>

using namespace std;

int minimum(int a,int b,int c){
    int arr[3];
    arr[0] = a;
    arr[1] = b;
    arr[2] = c;
    int min = arr[0];
    for(int i=1;i<3;++i){
        if(arr[i]<min){min = arr[i];}
    }
    return min;
}

// len_s and len_t are the number of characters in string s and t respectively
int LevenshteinDistance(string s, int len_s, string t, int len_t)
{ int cost;

  /* base case: empty strings */
  if (len_s == 0) return len_t;
  if (len_t == 0) return len_s;

  /* test if last characters of the strings match */
  if (s[len_s-1] == t[len_t-1])
      cost = 0;
  else
      cost = 1;

  /* return minimum of delete char from s, delete char from t, and delete char from both */
  return minimum(LevenshteinDistance(s, len_s - 1, t, len_t    ) + 1,
                 LevenshteinDistance(s, len_s    , t, len_t - 1) + 1,
                 LevenshteinDistance(s, len_s - 1, t, len_t - 1) + cost);
}

int main(){
    string s = "this is a test";
    string t = "wokka wokka!!!";
    cout<<LevenshteinDistance(s,s.size(),t,t.size())<<endl;
    return 0;
}
